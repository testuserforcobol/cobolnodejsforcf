{
  "_args": [
    [
      "cobolscript@0.0.1",
      "/home/yj/Bluemix/cobolnodejsforcf"
    ]
  ],
  "_from": "cobolscript@0.0.1",
  "_id": "cobolscript@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/cobolscript",
  "_npmUser": {
    "email": "webmaster@ajlopez.com",
    "name": "ajlopez"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "name": "cobolscript",
    "raw": "cobolscript@0.0.1",
    "rawSpec": "0.0.1",
    "scope": null,
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cobolscript/-/cobolscript-0.0.1.tgz",
  "_shasum": "8081c9d9ad5b43241c2ea24d5c7b84d79f95acac",
  "_shrinkwrap": null,
  "_spec": "cobolscript@0.0.1",
  "_where": "/home/yj/Bluemix/cobolnodejsforcf",
  "author": {
    "email": "webmaster@ajlopez.com",
    "name": "Angel 'Java' Lopez",
    "url": "http://www.ajlopez.com"
  },
  "bugs": {
    "url": "https://github.com/ajlopez/CobolScript/issues"
  },
  "dependencies": {},
  "description": "COBOL compiler to JavaScript",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8081c9d9ad5b43241c2ea24d5c7b84d79f95acac",
    "tarball": "https://registry.npmjs.org/cobolscript/-/cobolscript-0.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.6.0 && < 0.9.0"
  },
  "homepage": "https://github.com/ajlopez/CobolScript#readme",
  "keywords": [
    "cobol",
    "compiler",
    "interpreter",
    "javascript"
  ],
  "main": "./lib/cobolscript.js",
  "maintainers": [
    {
      "name": "ajlopez",
      "email": "webmaster@ajlopez.com"
    }
  ],
  "name": "cobolscript",
  "optionalDependencies": {},
  "readme": "# CobolScript\r\n\r\nCOBOL language compiler to Javascript. Work in Progress\r\n\r\n## Installation\r\n\r\nVia npm using (Node.js)[http://nodejs.org]:\r\n```\r\nnpm install cobolscript\r\n```\r\n\r\n## Usage\r\n\r\nReference in your program:\r\n```js\r\nvar cobolscript = require('cobolscript');\r\n```\r\n\r\nTo compile a source code:\r\n```js\r\nvar program = cobolscript.compileProgram('display \"Hello, world\".');\r\n```\r\n\r\nTo compile a file:\r\n```js\r\nvar program = cobolscript.compileProgramFile('./hello.cob');\r\n```\r\n\r\nTo run a compiled program:\r\n```js\r\nprogram.run(cobolscript.getRuntime());\r\n```\r\n\r\nSome programs need a runtime object that provides helper functions, i.e. `display` implementation. In the above example, a console-oriented runtime\r\nobject is obtained. \r\n\r\nIn web samples, a runtime that uses request, response is used:\r\n```js\r\nhttp.createServer(function(req, res) {\r\n    program.run(cobs.getRuntime({ request: req, response: res }));\r\n}).listen(8000);\r\n```\r\n\r\n## Development\r\n\r\n```\r\ngit clone git://github.com/ajlopez/CobolScript.git\r\ncd CobolScript\r\nnpm install\r\nnpm test\r\n```\r\n\r\n## Samples\r\n\r\n[Hello](https://github.com/ajlopez/CobolScript/tree/master/samples/hello) Simple Hello, world program, without division declarations.\r\n\r\n[Hello Program](https://github.com/ajlopez/CobolScript/tree/master/samples/hellopgm) Hello, world program, with identification, environment, data and procedure divisions.\r\n\r\n[Hello Web](https://github.com/ajlopez/CobolScript/tree/master/samples/helloweb) Hello web page. `display` output produces page content.\r\n\r\n[Factorial](https://github.com/ajlopez/CobolScript/tree/master/samples/factorial) Factorial console program, using working storage variable, `perform` with `using` and `giving` and local variables for recursion.\r\n\r\n[Factorial Web](https://github.com/ajlopez/CobolScript/tree/master/samples/factorialweb) Factorial web page.\r\n\r\n[Local](https://github.com/ajlopez/CobolScript/tree/master/samples/local) Using `local` to define a variable, instead of working storage.\r\n\r\n[Template](https://github.com/ajlopez/CobolScript/tree/master/samples/template) Console program using a template. CobolScript can be embedded in text.\r\n\r\n[Template Web](https://github.com/ajlopez/CobolScript/tree/master/samples/templateweb) Web page using a template.\r\n\r\n[Web Server](https://github.com/ajlopez/CobolScript/tree/master/samples/webserver) Accessing Node.js functions, to start a web server and serves a single page.\r\n\r\n[Linkage Section](https://github.com/ajlopez/CobolScript/tree/master/samples/linkage) Using linkage section to access provided request, response in web page.\r\n\r\n[Asynchronous Hello](https://github.com/ajlopez/CobolScript/tree/master/samples/helloasync) Perform and procedure using the new async reserved word.\r\n\r\n[MySQL](https://github.com/ajlopez/CobolScript/tree/master/samples/mysql) Connecting and using a MySQL server.\r\n\r\n[MySQL Web](https://github.com/ajlopez/CobolScript/tree/master/samples/mysqlweb) Connecting and using a MySQL server, generating web pages, listing databases, tables and columns.\r\n\r\n[Web Site](https://github.com/ajlopez/CobolScript/tree/master/samples/website) Dynamic site using MySQL server, with customers and suppliers.\r\n\r\n## To do\r\n\r\n- More Samples\r\n- Logical operators and expressions\r\n- IS, NOT\r\n- Comparison word operators\r\n- Compute\r\n- Complex expressions\r\n- Pictures.\r\n- File section.\r\n- Database section.\r\n- Copy\r\n- `exec sql`.\r\n\r\n## References\r\n\r\n[COBOL Tutorial](http://www.mainframegurukul.com/tutorials/programming/cobol/cobol-tutorial.html)\r\n\r\n[COBOL Tutorials](http://www.mainframetutorials.com/programming/programming.cobol.html)\r\n\r\n[COBOL Programming Standards](http://www.tonymarston.net/cobol/cobolstandards.html)\r\n\r\n## Contribution\r\n\r\nFeel free to [file issues](https://github.com/ajlopez/CobolScript) and submit\r\n[pull requests](https://github.com/ajlopez/CobolScript/pulls) ï¿½ contributions are\r\nwelcome.\r\n\r\nIf you submit a pull request, please be sure to add or update corresponding\r\ntest cases, and ensure that `npm test` continues to pass.\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ajlopez/CobolScript.git"
  },
  "scripts": {
    "test": "node ./test.js"
  },
  "version": "0.0.1"
}
